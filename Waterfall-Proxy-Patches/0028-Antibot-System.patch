From b4ba3f3f68b4bfd4e8af4249fa30cc59ccfdde83 Mon Sep 17 00:00:00 2001
From: LinsaFTW <25271111+linsaftw@users.noreply.github.com>
Date: Fri, 4 Mar 2022 13:35:53 -0300
Subject: [PATCH] Antibot System


diff --git a/flamecord/pom.xml b/flamecord/pom.xml
index 20edd9001..5978bec60 100644
--- a/flamecord/pom.xml
+++ b/flamecord/pom.xml
@@ -30,6 +30,11 @@
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>com.maxmind.db</groupId>
+            <artifactId>maxmind-db</artifactId>
+            <version>2.0.0</version>
+        </dependency>
     </dependencies>
 
     <build>
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/AccountsCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/AccountsCheck.java
new file mode 100644
index 000000000..da52c8924
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/AccountsCheck.java
@@ -0,0 +1,36 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+import java.util.Collection;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class AccountsCheck {
+    private FlameCordConfiguration config;
+    private final AddressDataManager addressDataManager;
+
+    public AccountsCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    public boolean check(final SocketAddress socketAddress, final String nickname) {
+        if (config.isAntibotAccountsEnabled()) {
+            final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+            final Collection<String> nicknames = addressData.getNicknames();
+
+            if (nicknames.size() > config.getAntibotAccountsLimit()) {
+                nicknames.remove(nickname);
+
+                if (config.isAntibotAccountsFirewall()) {
+                    addressData.firewall("Too many accounts");
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/AddressData.java b/flamecord/src/main/java/dev/_2lstudios/antibot/AddressData.java
new file mode 100644
index 000000000..b37f114a0
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/AddressData.java
@@ -0,0 +1,154 @@
+package dev._2lstudios.antibot;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class AddressData {
+    private FlameCordConfiguration config;
+    private final Collection<String> nicknames = new HashSet<>();
+    private final String hostString;
+    private String lastNickname = "";
+    private String country = null;
+    private String firewallReason = null;
+    private long lastPing = 0;
+    private long penultimateConnection = 0;
+    private long lastConnection = 0;
+    private long lastFirewall = 0;
+    private int pingsSecond = 0;
+    private int totalPings = 0;
+    private int connectionsSecond = 0;
+    private int totalConnections = 0;
+
+    public AddressData(final String hostString) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.hostString = hostString;
+    }
+
+    public Collection<String> getNicknames() {
+        return nicknames;
+    }
+
+    public String getLastNickname() {
+        return lastNickname;
+    }
+
+    public void addNickname(final String nickname) {
+        if (!lastNickname.equals(nickname)) {
+            this.lastNickname = nickname;
+            this.totalConnections = 1;
+        }
+
+        this.nicknames.add(nickname);
+    }
+
+    public long getPenultimateConnection() {
+        return penultimateConnection;
+    }
+
+    public long getTimeSincePenultimateConnection() {
+        return System.currentTimeMillis() - penultimateConnection;
+    }
+
+    public long getLastConnection() {
+        return lastConnection;
+    }
+
+    public long getTimeSinceLastConnection() {
+        return System.currentTimeMillis() - lastConnection;
+    }
+
+    private void updatePingsSecond() {
+        if (System.currentTimeMillis() - lastPing >= 1000) {
+            pingsSecond = 0;
+        }
+    }
+
+    public int getPingsSecond() {
+        updatePingsSecond();
+        return pingsSecond;
+    }
+
+    public void addPing() {
+        updatePingsSecond();
+        lastPing = System.currentTimeMillis();
+        pingsSecond++;
+        totalPings++;
+    }
+
+    public int getTotalPings() {
+        return totalPings;
+    }
+
+    private void updateConnectionsSecond() {
+        if (System.currentTimeMillis() - lastConnection >= 1000) {
+            connectionsSecond = 0;
+        }
+    }
+
+    public int getConnectionsSecond() {
+        updateConnectionsSecond();
+        return connectionsSecond;
+    }
+
+    public void addConnection() {
+        final long currentTime = System.currentTimeMillis();
+
+        updateConnectionsSecond();
+        penultimateConnection = lastConnection == 0 ? currentTime : lastConnection;
+        lastConnection = currentTime;
+        connectionsSecond++;
+        totalConnections++;
+    }
+
+    public int getTotalConnections() {
+        return totalConnections;
+    }
+
+    public String getHostString() {
+        return hostString;
+    }
+
+    public boolean isFirewalled() {
+        return System.currentTimeMillis() - lastFirewall < config
+                .getAntibotFirewallExpire() * 1000;
+    }
+
+    public void firewall(String reason) {
+        if (!hostString.equals("127.0.0.1")) {
+            this.lastFirewall = System.currentTimeMillis();
+            this.firewallReason = reason;
+        }
+    }
+
+    public void unfirewall() {
+        this.lastFirewall = 0;
+        this.firewallReason = null;
+    }
+
+    public String getFirewallReason() {
+        if (isFirewalled()) {
+            return firewallReason;
+        }
+
+        return null;
+    }
+
+    public void setTotalConnections(final int totalConnections) {
+        this.totalConnections = totalConnections;
+    }
+
+    public String setCountry(final String country) {
+        return this.country = country;
+    }
+
+    public String getCountry() {
+        return country;
+    }
+
+    public boolean hasNickname(final String nickname) {
+        return nicknames.contains(nickname);
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/AddressDataManager.java b/flamecord/src/main/java/dev/_2lstudios/antibot/AddressDataManager.java
new file mode 100644
index 000000000..6c7b300c2
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/AddressDataManager.java
@@ -0,0 +1,31 @@
+package dev._2lstudios.antibot;
+
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.HashMap;
+import java.util.Map;
+
+public class AddressDataManager {
+    private final Map<String, AddressData> addressData = new HashMap<>();
+
+    public AddressData getAddressData(String addressString) {
+        addressString = addressString.replace("/", "").split(":")[0];
+
+        if (addressData.containsKey(addressString)) {
+            return addressData.get(addressString);
+        } else {
+            AddressData data = new AddressData(addressString);
+
+            addressData.put(addressString, data);
+    
+            return data;
+        }
+    }
+
+    public AddressData getAddressData(final SocketAddress address) {
+        final InetSocketAddress iNetSocketAddress = (InetSocketAddress) address;
+        final String addressString = iNetSocketAddress.getHostString();
+        
+        return getAddressData(addressString);
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/CheckManager.java b/flamecord/src/main/java/dev/_2lstudios/antibot/CheckManager.java
new file mode 100644
index 000000000..0676f897f
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/CheckManager.java
@@ -0,0 +1,37 @@
+package dev._2lstudios.antibot;
+
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+import lombok.Getter;
+
+public class CheckManager {
+    @Getter
+    private final AccountsCheck accountsCheck;
+    @Getter
+    private final CountryCheck countryCheck;
+    @Getter
+    private final FastChatCheck fastChatCheck;
+    @Getter
+    private final NicknameCheck nicknameCheck;
+    @Getter
+    private final PasswordCheck passwordCheck;
+    @Getter
+    private final RatelimitCheck ratelimitCheck;
+    @Getter
+    private final ReconnectCheck reconnectCheck;
+
+    public CheckManager(final AddressDataManager addressDataManager, final FlameCordConfiguration flameCordConfiguration) {
+        this.accountsCheck = new AccountsCheck(addressDataManager);
+        this.countryCheck = new CountryCheck(addressDataManager);
+        this.fastChatCheck = new FastChatCheck(addressDataManager);
+        this.nicknameCheck = new NicknameCheck(addressDataManager);
+        this.passwordCheck = new PasswordCheck(addressDataManager);
+        this.ratelimitCheck = new RatelimitCheck(addressDataManager);
+        this.reconnectCheck = new ReconnectCheck(addressDataManager);
+
+        this.countryCheck.load();
+    }
+
+    public void unload() {
+        this.countryCheck.unload();
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java
new file mode 100644
index 000000000..e2410468d
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java
@@ -0,0 +1,140 @@
+package dev._2lstudios.antibot;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.net.URL;
+import java.nio.file.Files;
+
+import com.maxmind.db.CHMCache;
+import com.maxmind.db.MaxMindDbConstructor;
+import com.maxmind.db.MaxMindDbParameter;
+import com.maxmind.db.Reader;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class CountryCheck {
+    private FlameCordConfiguration config;
+    private final AddressDataManager addressDataManager;
+    private Reader maxMindReader;
+
+    public CountryCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    public void download(final URL url, final File file) throws Exception {
+        try (InputStream in = url.openStream()) {
+            Files.copy(in, file.toPath());
+        }
+    }
+
+    public void load() {
+        final File file = new File("GeoLite2-Country.mmdb");
+
+        try {
+            if (!file.exists()) {
+                System.out.println("Starting download of MaxMindDB (This will take some seconds...)");
+                download(new URL("https://git.io/GeoLite2-Country.mmdb"), file);
+            }
+
+            this.maxMindReader = new Reader(file, new CHMCache());
+        } catch (final Exception exception) {
+            System.out.println("MaxMindDB was not able to download!");
+        }
+    }
+
+    public void unload() {
+        try {
+            if (this.maxMindReader != null) {
+                this.maxMindReader.close();
+            }
+        } catch (final IOException ex) {
+            // Ignored
+        }
+    }
+
+    private boolean isBlacklisted(final FlameCordConfiguration config, final String isoCode) {
+        for (final String blacklisted : config.getAntibotCountryBlacklist()) {
+            if (isoCode.contains(blacklisted)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public static class LookupResult {
+        private final Country country;
+
+        @MaxMindDbConstructor
+        public LookupResult(@MaxMindDbParameter(name = "country") final Country country) {
+            this.country = country;
+        }
+
+        public Country getCountry() {
+            return this.country;
+        }
+    }
+
+    public static class Country {
+        private final String isoCode;
+
+        @MaxMindDbConstructor
+        public Country(@MaxMindDbParameter(name = "iso_code") final String isoCode) {
+            this.isoCode = isoCode;
+        }
+
+        public String getIsoCode() {
+            return this.isoCode;
+        }
+    }
+
+    public String getIsoCode(final InetAddress address) {
+        try {
+            final LookupResult lookupResult = maxMindReader.get(address, LookupResult.class);
+
+            if (lookupResult == null) {
+                return "LOCAL";
+            } else {
+                final Country country = lookupResult.getCountry();
+                final String isoCode = country.getIsoCode();
+
+                return isoCode;
+            }
+        } catch (final Exception exception) {
+            // Ignored
+        }
+
+        return null;
+    }
+
+    public boolean check(final SocketAddress socketAddress) {
+        if (config.isAntibotCountryEnabled()) {
+            final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+            final String addressCountry = addressData.getCountry();
+            final String country;
+
+            if (addressCountry != null) {
+                country = addressCountry;
+            } else {
+                country = getIsoCode(((InetSocketAddress) socketAddress).getAddress());
+                addressData.setCountry(country);
+            }
+
+            if (country != null && isBlacklisted(config, country)) {
+                if (config.isAntibotCountryFirewall()) {
+                    addressData.firewall("Blacklisted country");
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/FastChatCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/FastChatCheck.java
new file mode 100644
index 000000000..197636935
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/FastChatCheck.java
@@ -0,0 +1,32 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class FastChatCheck {
+    private FlameCordConfiguration config;
+    private final AddressDataManager addressDataManager;
+
+    public FastChatCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    public boolean check(final SocketAddress socketAddress) {
+        if (config.isAntibotFastChatEnabled()) {
+            final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+
+            if (addressData.getTimeSinceLastConnection() <= config.getAntibotFastChatTime()) {
+                if (config.isAntibotFastChatFirewall()) {
+                    addressData.firewall("Too fast chatting");
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/NicknameCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/NicknameCheck.java
new file mode 100644
index 000000000..222aba31f
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/NicknameCheck.java
@@ -0,0 +1,45 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class NicknameCheck {
+    private FlameCordConfiguration config;
+    private AddressDataManager addressDataManager;
+
+    public NicknameCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    private boolean isBlacklisted(final FlameCordConfiguration config, final String nickname) {
+        String lowerNickname = nickname.toLowerCase();
+
+        for (final String blacklisted : config.getAntibotNicknameBlacklist()) {
+            if (lowerNickname.contains(blacklisted)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public boolean check(final SocketAddress socketAddress) {
+        if (config.isAntibotNicknameEnabled()) {
+            final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+            final String nickname = addressData.getLastNickname();
+
+            if (isBlacklisted(config, nickname)) {
+                if (config.isAntibotNicknameFirewall()) {
+                    addressData.firewall("Blacklisted nickname [" + nickname + "]");
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/PasswordCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/PasswordCheck.java
new file mode 100644
index 000000000..bdc024f58
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/PasswordCheck.java
@@ -0,0 +1,62 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class PasswordCheck {
+    private FlameCordConfiguration config;
+    private AddressDataManager addressDataManager;
+    private String lastNickname = "";
+    private String lastPassword = "";
+    private int repeatCount = 0;
+
+    public PasswordCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    private void updatePassword(final FlameCordConfiguration config, final String nickname, final String password) {
+        if (!nickname.equals(lastNickname)) {
+            if (password.equals(lastPassword)) {
+                if (repeatCount < config.getAntibotPasswordLimit()) {
+                    repeatCount++;
+                }
+            } else if (repeatCount > 0) {
+                repeatCount--;
+            }
+        }
+
+        lastNickname = nickname;
+        lastPassword = password;
+    }
+
+    public boolean check(final SocketAddress socketAddress, final String passwordMessage) {
+        if (config.isAntibotPasswordEnabled()) {
+            if (passwordMessage.contains("/login ") || passwordMessage.contains("/l ")
+                    || passwordMessage.contains("/register ")
+                    || passwordMessage.contains("/reg ")) {
+                final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+                final String nickname = addressData.getLastNickname();
+                final String password = passwordMessage.split(" ")[1];
+
+                updatePassword(config, nickname, password);
+
+                if (repeatCount >= config.getAntibotPasswordLimit()) {
+                    if (config.isAntibotPasswordFirewall()) {
+                        addressData.firewall("Repeated password");
+                    }
+
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    public int getRepeatCount() {
+        return repeatCount;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/RatelimitCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/RatelimitCheck.java
new file mode 100644
index 000000000..b55b4bb17
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/RatelimitCheck.java
@@ -0,0 +1,33 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class RatelimitCheck {
+    private FlameCordConfiguration config;
+    private final AddressDataManager addressDataManager;
+
+    public RatelimitCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    public boolean check(final SocketAddress socketAddress) {
+        if (config.isAntibotRatelimitEnabled()) {
+            final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+
+            if (addressData.getConnectionsSecond() >= config.getAntibotRatelimitConnectionsPerSecond()
+                    || addressData.getPingsSecond() >= config.getAntibotRatelimitPingsPerSecond()) {
+                if (config.isAntibotRatelimitFirewall()) {
+                    addressData.firewall("Too fast connections");
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/ReconnectCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/ReconnectCheck.java
new file mode 100644
index 000000000..efd8d2cac
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/ReconnectCheck.java
@@ -0,0 +1,46 @@
+package dev._2lstudios.antibot;
+
+import java.net.SocketAddress;
+
+import dev._2lstudios.flamecord.FlameCord;
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+
+public class ReconnectCheck {
+    private FlameCordConfiguration config;
+    private final AddressDataManager addressDataManager;
+    private int connections = 0;
+    private long lastConnection = 0;
+
+    public ReconnectCheck(final AddressDataManager addressDataManager) {
+        this.config = FlameCord.getInstance().getFlameCordConfiguration();
+        this.addressDataManager = addressDataManager;
+    }
+
+    public boolean check(final SocketAddress socketAddress) {
+        if (config.isAntibotReconnectEnabled()) {
+            final long currentTime = System.currentTimeMillis();
+
+            if (currentTime - lastConnection > config.getAntibotReconnectConnectionThresholdLimit()) {
+                lastConnection = currentTime;
+                connections = 0;
+            }
+
+            if (++connections > config.getAntibotReconnectConnectionThreshold()) {
+                final AddressData addressData = addressDataManager.getAddressData(socketAddress);
+                final boolean needsAttempts = addressData.getTotalConnections() < config.getAntibotReconnectAttempts()
+                        || addressData.getTotalPings() < config.getAntibotReconnectPings();
+                final boolean tooSlow = addressData.getTimeSincePenultimateConnection() > config
+                        .getAntibotReconnectMaxTime();
+
+                if (tooSlow) {
+                    addressData.setTotalConnections(0);
+                    return true;
+                } else {
+                    return needsAttempts;
+                }
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java
index c78ab3a7c..8591a7918 100644
--- a/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java
@@ -3,6 +3,8 @@ package dev._2lstudios.flamecord;
 import java.util.Collection;
 import java.util.logging.Logger;
 
+import dev._2lstudios.antibot.AddressDataManager;
+import dev._2lstudios.antibot.CheckManager;
 import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
 import dev._2lstudios.flamecord.configuration.MessagesConfiguration;
 import dev._2lstudios.flamecord.configuration.ModulesConfiguration;
@@ -18,26 +20,31 @@ public class FlameCord {
         if (FlameCord.instance != null) {
             instance.reload(logger);
         } else {
-            FlameCord.instance = new FlameCord(logger, whitelistedAddresses);
+            FlameCord.instance = new FlameCord();
+            instance.reload(logger);
         }
     }
 
     @Getter
     private FlameCordConfiguration flameCordConfiguration;
     @Getter
+    private AddressDataManager addressDataManager;
+    @Getter
+    private CheckManager checkManager;
+    @Getter
     private ModulesConfiguration modulesConfiguration;
     @Getter
     private MessagesConfiguration messagesConfiguration;
 
     private void reload(final Logger logger) {
         final ConfigurationProvider configurationProvider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+        
+        if (checkManager != null) checkManager.unload();
 
         this.flameCordConfiguration = new FlameCordConfiguration(configurationProvider);
         this.modulesConfiguration = new ModulesConfiguration(configurationProvider);
         this.messagesConfiguration = new MessagesConfiguration(logger, configurationProvider);
-    }
-
-    private FlameCord(final Logger logger, final Collection<String> whitelistedAddresses) {
-        reload(logger);
+        this.addressDataManager = new AddressDataManager();
+        this.checkManager = new CheckManager(addressDataManager, flameCordConfiguration);
     }
 }
\ No newline at end of file
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
index a1d23f74d..76c35626d 100644
--- a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
@@ -16,6 +16,120 @@ import net.md_5.bungee.config.Configuration;
 import net.md_5.bungee.config.ConfigurationProvider;
 
 public class FlameCordConfiguration extends FlameConfig {
+    // FlameCord start - Antibot System
+    @Getter
+    private boolean antibotAccountsEnabled = true;
+    @Getter
+    private boolean antibotAccountsFirewall = true;
+    @Getter
+    private int antibotAccountsLimit = 3;
+    @Getter
+    private boolean antibotAccountsLog = true;
+    @Getter
+    private boolean antibotCountryEnabled = true;
+    @Getter
+    private boolean antibotCountryFirewall = true;
+    @Getter
+    private Collection<String> antibotCountryBlacklist = Arrays.asList("CN", "HK", "RU", "IN", "TH", "ID", "DZ", "VN", "IR", "PK");
+    @Getter
+    private Collection<String> antibotFirewalledExceptions = Arrays.asList("BadPacketException", "QuietException", "IllegalStateConfig", "FastException");
+    @Getter
+    private boolean antibotCountryLog = true;
+    @Getter
+    private boolean antibotFastChatEnabled = true;
+    @Getter
+    private boolean antibotFastChatFirewall = true;
+    @Getter
+    private int antibotFastChatTime = 1000;
+    @Getter
+    private boolean antibotFastChatLog = true;
+    @Getter
+    private boolean antibotFirewallEnabled = true;
+    @Getter
+    private int antibotFirewallExpire = 60;
+    @Getter
+    private boolean antibotFirewallLog = true;
+    @Getter
+    private boolean antibotNicknameEnabled = true;
+    @Getter
+    private boolean antibotNicknameFirewall = true;
+    @Getter
+    private Collection<String> antibotNicknameBlacklist = Arrays.asList("mcstorm", "mcdown", "mcbot", "theresa_bot", "dropbot", "kingbot");
+    @Getter
+    private boolean antibotNicknameLog = true;
+    @Getter
+    private boolean antibotPasswordEnabled = true;
+    @Getter
+    private boolean antibotPasswordFirewall = true;
+    @Getter
+    private int antibotPasswordLimit = 3;
+    @Getter
+    private boolean antibotPasswordLog = true;
+    @Getter
+    private boolean antibotRatelimitEnabled = true;
+    @Getter
+    private boolean antibotRatelimitFirewall = true;
+    @Getter
+    private int antibotRatelimitConnectionsPerSecond = 3;
+    @Getter
+    private int antibotRatelimitPingsPerSecond = 8;
+    @Getter
+    private boolean antibotRatelimitLog = true;
+    @Getter
+    private boolean antibotReconnectEnabled = true;
+    @Getter
+    private int antibotReconnectAttempts = 2;
+    @Getter
+    private int antibotReconnectPings = 0;
+    @Getter
+    private int antibotReconnectMaxTime = 10000;
+    @Getter
+    private int antibotReconnectConnectionThreshold = 1;
+    @Getter
+    private int antibotReconnectConnectionThresholdLimit = 8000;
+    @Getter
+    private boolean antibotReconnectLog = true;
+
+    public void loadAntibot(final Configuration config) {
+        this.antibotAccountsEnabled = setIfUnexistant("antibot.accounts.enabled", this.antibotAccountsEnabled, config);
+        this.antibotAccountsFirewall = setIfUnexistant("antibot.accounts.firewall", this.antibotAccountsFirewall, config);
+        this.antibotAccountsLimit = setIfUnexistant("antibot.accounts.limit", this.antibotAccountsLimit, config);
+        this.antibotAccountsLog = setIfUnexistant("antibot.accounts.log", this.antibotAccountsLog, config);
+        this.antibotCountryEnabled = setIfUnexistant("antibot.country.enabled", this.antibotCountryEnabled, config);
+        this.antibotCountryFirewall = setIfUnexistant("antibot.country.firewall", this.antibotCountryFirewall, config);
+        this.antibotCountryBlacklist = setIfUnexistant("antibot.country.blacklist", this.antibotCountryBlacklist, config);
+        this.antibotCountryLog = setIfUnexistant("antibot.country.log", this.antibotCountryLog, config);
+        this.antibotFastChatEnabled = setIfUnexistant("antibot.fastchat.enabled", this.antibotFastChatEnabled, config);
+        this.antibotFastChatFirewall = setIfUnexistant("antibot.fastchat.firewall", this.antibotFastChatFirewall, config);
+        this.antibotFastChatTime = setIfUnexistant("antibot.fastchat.time", this.antibotFastChatTime, config);
+        this.antibotFastChatLog = setIfUnexistant("antibot.fastchat.log", this.antibotFastChatLog, config);
+        this.antibotFirewallEnabled = setIfUnexistant("antibot.firewall.enabled", this.antibotFirewallEnabled, config);
+        this.antibotFirewalledExceptions = setIfUnexistant("antibot.firewall.exceptions", this.antibotFirewalledExceptions, config);
+        this.antibotFirewallExpire = setIfUnexistant("antibot.firewall.time", this.antibotFirewallExpire, config);
+        this.antibotFirewallLog = setIfUnexistant("antibot.firewall.log", this.antibotFirewallLog, config);
+        this.antibotNicknameEnabled = setIfUnexistant("antibot.nickname.enabled", this.antibotNicknameEnabled, config);
+        this.antibotNicknameFirewall = setIfUnexistant("antibot.nickname.firewall", this.antibotNicknameFirewall, config);
+        this.antibotNicknameBlacklist = setIfUnexistant("antibot.nickname.blacklist", this.antibotNicknameBlacklist, config);
+        this.antibotNicknameLog = setIfUnexistant("antibot.nickname.log", this.antibotNicknameLog, config);
+        this.antibotPasswordEnabled = setIfUnexistant("antibot.password.enabled", this.antibotPasswordEnabled, config);
+        this.antibotPasswordFirewall = setIfUnexistant("antibot.password.firewall", this.antibotPasswordFirewall, config);
+        this.antibotPasswordLimit = setIfUnexistant("antibot.password.limit", this.antibotPasswordLimit, config);
+        this.antibotPasswordLog = setIfUnexistant("antibot.password.log", this.antibotPasswordLog, config);
+        this.antibotRatelimitEnabled = setIfUnexistant("antibot.ratelimit.enabled", this.antibotRatelimitEnabled, config);
+        this.antibotRatelimitFirewall = setIfUnexistant("antibot.ratelimit.firewall", this.antibotRatelimitFirewall, config);
+        this.antibotRatelimitConnectionsPerSecond = setIfUnexistant("antibot.ratelimit.connections-per-second", this.antibotRatelimitConnectionsPerSecond, config);
+        this.antibotRatelimitPingsPerSecond = setIfUnexistant("antibot.ratelimit.pings-per-second", this.antibotRatelimitPingsPerSecond, config);
+        this.antibotRatelimitLog = setIfUnexistant("antibot.ratelimit.log", this.antibotRatelimitLog, config);
+        this.antibotReconnectEnabled = setIfUnexistant("antibot.reconnect.enabled", this.antibotReconnectEnabled, config);
+        this.antibotReconnectAttempts = setIfUnexistant("antibot.reconnect.attempts", this.antibotReconnectAttempts, config);
+        this.antibotReconnectPings = setIfUnexistant("antibot.reconnect.pings", this.antibotReconnectPings, config);
+        this.antibotReconnectMaxTime = setIfUnexistant("antibot.reconnect.max-time", this.antibotReconnectMaxTime, config);
+        this.antibotReconnectConnectionThreshold = setIfUnexistant("antibot.reconnect.connection-threshold", this.antibotReconnectConnectionThreshold, config);
+        this.antibotReconnectConnectionThresholdLimit = setIfUnexistant("antibot.reconnect.connection-threshold-limit", this.antibotReconnectConnectionThresholdLimit, config);
+        this.antibotReconnectLog = setIfUnexistant("antibot.reconnect.log", this.antibotReconnectLog, config);
+    }
+    // FlameCord end - Antibot System
+
     // FlameCord - TCP Fast Open
     @Getter
     private int tcpFastOpen = 3;
@@ -117,6 +231,8 @@ public class FlameCordConfiguration extends FlameConfig {
             this.fakePlayersEnabled = setIfUnexistant("custom-motd.fakeplayers.enabled", this.fakePlayersEnabled, configuration);
             this.fakePlayersAmount = setIfUnexistant("custom-motd.fakeplayers.amount", this.fakePlayersAmount, configuration);
             this.fakePlayersMode = setIfUnexistant("custom-motd.fakeplayers.mode", this.fakePlayersMode, configuration);
+            loadAntibot(configuration);
+
             this.tcpFastOpen = setIfUnexistant("tcp-fast-open", this.tcpFastOpen, configuration);
 
             this.loggerInitialhandler = setIfUnexistant("logger.initialhandler", this.loggerInitialhandler, configuration);
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
index 4f306660e..5faab6166 100644
--- a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
@@ -82,12 +82,26 @@ public class MessagesConfiguration extends FlameConfig {
 			setIfUnexistant("command_ip", "&9IP of {0} is {1}", configuration);
 			setIfUnexistant("illegal_chat_characters", "&cIllegal characters in chat ({0})", configuration);
 
+			// FlameCord start - Antibot System
+			setIfUnexistant("antibot_accounts", "&c&lFlameCord\n\n&cYou have too many accounts! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_fastchat", "&c&lFlameCord\n\n&cYou are chatting too fast!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_firewall", "&c&lFlameCord\n\n&cYou are blocked from this server!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_nickname", "&c&lFlameCord\n\n&cYour nickname was detected as bot! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_password", "&c&lFlameCord\n\n&cYour password is used by other players! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_ratelimit", "&c&lFlameCord\n\n&cYou are connecting too fast! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_reconnect", "&c&lFlameCord\n\n&cReconnect {0} more times to enter!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_country", "&c&lFlameCord\n\n&cYour country {0} is blacklisted!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			// FlameCord end - Antibot System
+
 			// FlameCord
 			setIfUnexistant("flamecord_reload", "&aAll files had been successfully reloaded!", configuration);
 			setIfUnexistant("flamecord_help",
-					"&aFlameCord&b {0}&a by&b LinsaFTW&a &&b Sammwy&r\n&e /flamecord reload&7 >&b Reloads FlameCord files!\n&e /flamecord help&7 >&b Shows this message!",
+					"&aFlameCord&b {0}&a by&b LinsaFTW&a &&b Sammwy&r\n&e /flamecord reload&7 >&b Reloads FlameCord files!\n&e /flamecord firewall <add/remove> <ip>&7 >&b Firewall certain ips!\n&e /flamecord help&7 >&b Shows this message!",
 					configuration);
 			setIfUnexistant("flamecord_nopermission", "&cYou don't have permission to do this!", configuration);
+			setIfUnexistant("flamecord_firewall_help", "&c/flamecord firewall <add/remove> <ip>", configuration);
+			setIfUnexistant("flamecord_firewall_add", "&cThe ip {0} was added to the firewall!", configuration);
+			setIfUnexistant("flamecord_firewall_remove", "&cThe ip {0} was removed from the firewall!", configuration);
 
 			configurationProvider.save(configuration, configurationFile);
 
diff --git a/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
index cc76325b2..ae5d4c73f 100644
--- a/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
+++ b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
@@ -3,6 +3,7 @@ package dev._2lstudios.flamecord.commands;
 import java.util.Collection;
 import java.util.HashSet;
 
+import dev._2lstudios.antibot.AddressDataManager;
 import dev._2lstudios.flamecord.FlameCord;
 import dev._2lstudios.flamecord.configuration.MessagesConfiguration;
 import net.md_5.bungee.BungeeCord;
@@ -27,9 +28,7 @@ private final BungeeCord bungeeCord;
 
         if (sender.hasPermission("flamecord.usage")) {
             if (args.length > 0) {
-                final String arg0 = args[0];
-
-                switch (arg0) {
+                switch (args[0]) {
                     case "reload": {
                         // FlameCord - Collect ips from servers
                         final Collection<String> whitelistedAddresses = new HashSet<>();
@@ -43,9 +42,34 @@ private final BungeeCord bungeeCord;
                                 .fromLegacyText(messagesConfiguration.getTranslation("flamecord_reload")));
                         break;
                     }
+                    case "firewall": {
+                        if (args.length > 2) {
+                            String ip = args[2];
+                            
+                            switch (args[1]) {
+                                case "add": {
+                                    FlameCord.getInstance().getAddressDataManager().getAddressData(ip).firewall("Blacklisted by command");
+                                    sender.sendMessage(TextComponent.fromLegacyText(messagesConfiguration.getTranslation("flamecord_firewall_add", ip)));
+                                    break;
+                                }
+                                case "remove": {
+                                    FlameCord.getInstance().getAddressDataManager().getAddressData(ip).unfirewall();
+                                    sender.sendMessage(TextComponent.fromLegacyText(messagesConfiguration.getTranslation("flamecord_firewall_remove", ip)));
+                                    break;
+                                }
+                                default: {
+                                    sender.sendMessage(TextComponent.fromLegacyText(messagesConfiguration.getTranslation("flamecord_firewall_help")));
+                                    break;
+                                }
+                            }
+                        } else {
+                            sender.sendMessage(TextComponent.fromLegacyText(messagesConfiguration.getTranslation("flamecord_firewall_help")));
+                        }
+
+                        break;
+                    }
                     default: {
-                        sender.sendMessage(TextComponent.fromLegacyText(
-                                messagesConfiguration.getTranslation("flamecord_help", bungeeCord.getVersion())));
+                        sender.sendMessage(TextComponent.fromLegacyText(messagesConfiguration.getTranslation("flamecord_help", bungeeCord.getVersion())));
                         break;
                     }
                 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index c00ab4b6a..089cac669 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -21,6 +21,8 @@ import java.util.logging.Level;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 
+import dev._2lstudios.antibot.AddressData;
+import dev._2lstudios.antibot.CheckManager;
 import dev._2lstudios.flamecord.FlameCord;
 
 import dev._2lstudios.flamecord.configuration.FlameConfig;
@@ -439,6 +441,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             return;
         }
 
+        // FlameCord start - Antibot System
+        AddressData addressData = FlameCord.getInstance().getAddressDataManager().getAddressData( ch.getRemoteAddress() );
+        CheckManager checkManager = FlameCord.getInstance().getCheckManager();
+        // FlameCord end - Antibot System
+
         switch ( handshake.getRequestedProtocol() )
         {
             case 1:
@@ -450,6 +457,22 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 }
                 thisState = State.STATUS;
                 ch.setProtocol( Protocol.STATUS );
+
+                // FlameCord start - Antibot System
+                addressData.addPing();
+
+                if ( checkManager.getRatelimitCheck().check( ch.getRemoteAddress() ) )
+                {
+                    if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotRatelimitLog() )
+                    {
+                        bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is pinging too fast", ch.getRemoteAddress() );
+                    }
+
+                    disconnect( bungee.getTranslation( "antibot_ratelimit", addressData.getPingsSecond() ) );
+                    return;
+                }
+                // FlameCord end - Antibot System
+
                 break;
             case 2:
                 // Login
@@ -461,6 +484,21 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 thisState = State.USERNAME;
                 ch.setProtocol( Protocol.LOGIN );
 
+                // FlameCord start - Antibot System
+                addressData.addConnection();
+
+                if ( checkManager.getRatelimitCheck().check( ch.getRemoteAddress() ) )
+                {
+                    if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotRatelimitLog() )
+                    {
+                        bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is connecting too fast", ch.getRemoteAddress() );
+                    }
+
+                    disconnect( bungee.getTranslation( "antibot_ratelimit", addressData.getConnectionsSecond() ) );
+                    return;
+                }
+                // FlameCord end - Antibot System
+
                 if ( !ProtocolConstants.SUPPORTED_VERSION_IDS.contains( handshake.getProtocolVersion() ) )
                 {
                     if ( handshake.getProtocolVersion() > bungee.getProtocolVersion() )
@@ -525,6 +563,58 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             return;
         }
 
+        // FlameCord start - Antibot System
+        CheckManager checkManager = FlameCord.getInstance().getCheckManager();
+        AddressData addressData = FlameCord.getInstance().getAddressDataManager().getAddressData( ch.getRemoteAddress() );
+        String nickname = loginRequest.getData();
+
+        addressData.addNickname( nickname );
+
+        if ( checkManager.getAccountsCheck().check( ch.getRemoteAddress(), nickname ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotAccountsLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has too many accounts", ch.getRemoteAddress() );
+            }
+
+            disconnect( bungee.getTranslation( "antibot_accounts", addressData.getNicknames().size() ) );
+            return;
+        }
+
+        if ( checkManager.getNicknameCheck().check( ch.getRemoteAddress() ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotNicknameLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has a blacklisted nickname (" + nickname + ")", ch.getRemoteAddress() );
+            }
+
+            disconnect( bungee.getTranslation( "antibot_nickname", loginRequest.getData() ) );
+            return;
+        }
+
+        if ( checkManager.getReconnectCheck().check( ch.getRemoteAddress() ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotReconnectLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has to reconnect to join", ch.getRemoteAddress() );
+            }
+
+            disconnect( bungee.getTranslation( "antibot_reconnect", FlameCord.getInstance().getFlameCordConfiguration().getAntibotReconnectAttempts() - addressData.getTotalConnections() ) );
+            return;
+        }
+
+        if ( checkManager.getCountryCheck().check( ch.getRemoteAddress() ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotCountryLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has his country blocked from the server", ch.getRemoteAddress() );
+            }
+
+            disconnect( bungee.getTranslation( "antibot_country", addressData.getCountry() ) );
+            return;
+        }
+        // FlameCord end - Antibot System
+
         // If offline mode and they are already on, don't allow connect
         // We can just check by UUID here as names are based on UUID
         if ( !isOnlineMode() && bungee.getPlayer( getUniqueId() ) != null )
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 66332af4e..7b852ff69 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -4,11 +4,16 @@ import com.google.common.base.Preconditions;
 import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
+
+import dev._2lstudios.antibot.CheckManager;
+import dev._2lstudios.flamecord.FlameCord;
 import io.netty.channel.Channel;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.UUID;
+import java.util.logging.Level;
+
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.ServerConnection.KeepAliveData;
 import net.md_5.bungee.UserConnection;
@@ -207,6 +212,32 @@ public class UpstreamBridge extends PacketHandler
         }
         Preconditions.checkArgument(!empty, "Chat message is empty");
 
+        // FlameCord start - Antibot System
+        final CheckManager checkManager = FlameCord.getInstance().getCheckManager();
+
+        if ( checkManager.getFastChatCheck().check( con.getCh().getRemoteAddress() ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotFastChatLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is chatting too fast", con.getCh().getRemoteAddress() );
+            }
+
+            con.disconnect( bungee.getTranslation( "antibot_fastchat" ) );
+            throw CancelSendSignal.INSTANCE;
+        }
+
+        if ( checkManager.getPasswordCheck().check( con.getCh().getRemoteAddress(), message ) )
+        {
+            if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotPasswordLog() )
+            {
+                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has entered a repeated password", con.getCh().getRemoteAddress() );
+            }
+
+            con.disconnect( bungee.getTranslation( "antibot_password", checkManager.getPasswordCheck().getRepeatCount() ) );
+            throw CancelSendSignal.INSTANCE;
+        }
+        // FlameCord end - Antibot System
+
         ChatEvent chatEvent = new ChatEvent( con, con.getServer(), message );
         if ( !bungee.getPluginManager().callEvent( chatEvent ).isCancelled() )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java b/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
index e2911d5e4..1e3608fa4 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
@@ -8,7 +8,11 @@ import io.netty.handler.codec.http.HttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.LastHttpContent;
 import java.nio.charset.Charset;
+import java.util.logging.Level;
+
+import dev._2lstudios.flamecord.FlameCord;
 import lombok.RequiredArgsConstructor;
+import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.api.Callback;
 
 @RequiredArgsConstructor
@@ -21,6 +25,15 @@ public class HttpHandler extends SimpleChannelInboundHandler<HttpObject>
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {
+        // Flamecord start - Antibot System
+        String reason = cause.getClass().getSimpleName();
+        if (FlameCord.getInstance().getFlameCordConfiguration().getAntibotFirewalledExceptions().contains(reason))
+        {
+            FlameCord.getInstance().getAddressDataManager().getAddressData(ctx.channel().remoteAddress()).firewall(reason);
+            BungeeCord.getInstance().getLogger().log( Level.INFO, "[FlameCord] [{0}] was firewalled because of " + reason, ctx.channel().remoteAddress() );
+        }
+        // Flamecord end - Antibot System
+
         try
         {
             callback.done( null, cause );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 14e3004fc..abca28bd7 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -12,6 +12,8 @@ import io.netty.handler.timeout.ReadTimeoutException;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.logging.Level;
+
+import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.connection.CancelSendSignal;
 import net.md_5.bungee.connection.InitialHandler;
@@ -146,6 +148,15 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {
+        // Flamecord start - Antibot System
+        String reason = cause.getClass().getSimpleName();
+        if (FlameCord.getInstance().getFlameCordConfiguration().getAntibotFirewalledExceptions().contains(reason))
+        {
+            FlameCord.getInstance().getAddressDataManager().getAddressData(ctx.channel().remoteAddress()).firewall(reason);
+            BungeeCord.getInstance().getLogger().log( Level.INFO, "[FlameCord] [{0}] was firewalled because of " + reason, ctx.channel().remoteAddress() );
+        }
+        // Flamecord end - Antibot System
+
         if ( ctx.channel().isActive() )
         {
             boolean logExceptions = !( handler instanceof PingHandler );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index ffea15992..4bb8eb460 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -59,6 +59,20 @@ public class PipelineUtils
         {
             SocketAddress remoteAddress = ( ch.remoteAddress() == null ) ? ch.parent().localAddress() : ch.remoteAddress();
 
+            // FlameCord start - Antibot System
+            String firewallReason = FlameCord.getInstance().getAddressDataManager().getAddressData(ch.remoteAddress()).getFirewallReason();
+            if ( firewallReason != null )
+            {
+                if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotFirewallLog() )
+                {
+                    BungeeCord.getInstance().getLogger().log( Level.INFO, "[FlameCord] [{0}] is firewalled from the server. ({1})", new Object[]{ ch.remoteAddress(), firewallReason } );
+                }
+
+                ch.close();
+                return;
+            }
+            // FlameCord end - Antibot System
+
             if ( BungeeCord.getInstance().getConnectionThrottle() != null && BungeeCord.getInstance().getConnectionThrottle().throttle( remoteAddress ) )
             {
                 ch.close();
-- 
2.37.3.windows.1

